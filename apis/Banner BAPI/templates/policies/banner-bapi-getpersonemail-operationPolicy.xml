<!--
    IMPORTANT:
    - Policy elements can appear only within the <inbound>, <outbound>, <backend> section elements.
    - To apply a policy to the incoming request (before it is forwarded to the backend service), place a corresponding policy element within the <inbound> section element.
    - To apply a policy to the outgoing response (before it is sent back to the caller), place a corresponding policy element within the <outbound> section element.
    - To add a policy, place the cursor at the desired insertion point and select a policy from the sidebar.
    - To remove a policy, delete the corresponding policy statement from the policy document.
    - Position the <base> element within a section element to inherit all policies from the corresponding section element in the enclosing scope.
    - Remove the <base> element to prevent inheriting policies from the corresponding section element in the enclosing scope.
    - Policies are applied in the order of their appearance, from the top down.
    - Comments within policy elements are not supported and may disappear. Place your comments between policy elements or at a higher level scope.
-->
<policies>
	<inbound>
		<base />
		<choose>
			<when condition="@(context.Response.StatusCode == 404)">
				<return-response>
					<set-status code="404" reason="Not Found" />
					<set-header name="Content-Type" exists-action="override">
						<value>application/json</value>
					</set-header>
					<set-body>
                    {
                        "error": {
                            "code": "NotFound",
                            "message": "Resource not found"
                        }
                    }
                </set-body>
				</return-response>
			</when>
			<otherwise>
				<return-response />
			</otherwise>
		</choose>
		<choose>
			<when condition="@(context.Response.StatusCode == 400)">
				<return-response>
					<set-status code="400" reason="Bad Request" />
					<set-header name="Content-Type" exists-action="override">
						<value>application/json</value>
					</set-header>
					<set-body>
                    {
                        "error": {
                            "code": "Bad Request",
                            "message": "Bad Request"
                        }
                    }
                </set-body>
				</return-response>
			</when>
			<otherwise>
				<return-response />
			</otherwise>
		</choose>
		<choose>
			<when condition="@(context.Response.StatusCode == 401)">
				<return-response>
					<set-status code="401" reason="Unauthorized" />
					<set-header name="Content-Type" exists-action="override">
						<value>application/json</value>
					</set-header>
					<set-body>
                    {
                        "error": {
                            "code": "401",
                            "message": "Unauthorized"
                        }
                    }
                </set-body>
				</return-response>
			</when>
			<otherwise>
				<return-response />
			</otherwise>
		</choose>
		<choose>
			<when condition="@(context.Response.StatusCode == 403)">
				<return-response>
					<set-status code="403" reason="Forbidden" />
					<set-header name="Content-Type" exists-action="override">
						<value>application/json</value>
					</set-header>
					<set-body>
                    {
                        "error": {
                            "code": "403",
                            "message": "Forbidden"
                        }
                    }
                </set-body>
				</return-response>
			</when>
			<otherwise>
				<return-response />
			</otherwise>
		</choose>
		<choose>
			<when condition="@(context.Response.StatusCode == 405)">
				<return-response>
					<set-status code="405" reason="Method Not Allowed" />
					<set-header name="Content-Type" exists-action="override">
						<value>application/json</value>
					</set-header>
					<set-body>
                    {
                        "error": {
                            "code": "405",
                            "message": "Method Not Allowed"
                        }
                    }
                </set-body>
				</return-response>
			</when>
			<otherwise>
				<return-response />
			</otherwise>
		</choose>
	</inbound>
	<backend>
		<base />
	</backend>
	<outbound>
		<base />
	</outbound>
	<on-error>
		<base />
		<return-response>
			<set-status code="500" reason="Internal Server Error" />
			<set-header name="Content-Type" exists-action="override">
				<value>application/json</value>
			</set-header>
			<set-body>
                    {
                        "error": {
                            "code": "500",
                            "message": "An unexpected error occurred"
                        }
                    }
                </set-body>
		</return-response>
		<return-response>
			<set-status code="502" reason="Bad Gateway" />
			<set-header name="Content-Type" exists-action="override">
				<value>application/json</value>
			</set-header>
			<set-body>
                    {
                        "error": {
                            "code": "502",
                            "message": "Bad Gateway"
                        }
                    }
                </set-body>
		</return-response>
		<return-response>
			<set-status code="503" reason="Service Unavailable" />
			<set-header name="Content-Type" exists-action="override">
				<value>application/json</value>
			</set-header>
			<set-body>
                    {
                        "error": {
                            "code": "503",
                            "message": "Service Unavailable"
                        }
                    }
                </set-body>
		</return-response>
		<return-response>
			<set-status code="504" reason="Gateway Timeout" />
			<set-header name="Content-Type" exists-action="override">
				<value>application/json</value>
			</set-header>
			<set-body>
                    {
                        "error": {
                            "code": "504",
                            "message": "Gateway Timeout"
                        }
                    }
                </set-body>
		</return-response>
	</on-error>
</policies>